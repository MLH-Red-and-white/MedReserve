[{"C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\index.js":"1","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\reportWebVitals.js":"2","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\App.js":"3","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\firebase.js":"4","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\reducers\\index.js":"5","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\components\\reserveForm.js":"6","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\reducers\\applicantReducer.js":"7","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\actions\\types.js":"8","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\actions\\applicantActions.js":"9","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\components\\successForm.js":"10"},{"size":1658,"mtime":1608390523877,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1608372190368,"results":"13","hashOfConfig":"12"},{"size":728,"mtime":1608393492335,"results":"14","hashOfConfig":"12"},{"size":574,"mtime":1608386497606,"results":"15","hashOfConfig":"12"},{"size":339,"mtime":1608375250193,"results":"16","hashOfConfig":"12"},{"size":8988,"mtime":1608394047159,"results":"17","hashOfConfig":"12"},{"size":924,"mtime":1608391020961,"results":"18","hashOfConfig":"12"},{"size":153,"mtime":1608377946669,"results":"19","hashOfConfig":"12"},{"size":1087,"mtime":1608392411645,"results":"20","hashOfConfig":"12"},{"size":702,"mtime":1608396187837,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"1tziq2l",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"25"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\index.js",["47","48","49","50"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport firebase from \"firebase/app\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  reduxFirestore,\r\n  getFirestore,\r\n  createFirestoreInstance,\r\n  firestoreReducer,\r\n} from \"redux-firestore\";\r\nimport {\r\n  ReactReduxFirebaseProvider,\r\n  firebaseReducer,\r\n} from \"react-redux-firebase\";\r\nimport { reactReduxFirebase, getFirebase } from \"react-redux-firebase\";\r\nimport fbConfig from \"./firebase\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  compose(\r\n    applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\r\n    reactReduxFirebase(fbConfig, {\r\n      applicantProfile: \"applicants\",\r\n    }),\r\n    reduxFirestore(fbConfig) // redux bindings for firestore\r\n  )\r\n);\r\n\r\nconst rrfConfig = {\r\n  userProfile: \"users\",\r\n  useFirestoreForProfile: true, // Firestore for Profile instead of Realtime DB\r\n};\r\n\r\nconst rrfProps = {\r\n  firebase,\r\n  config: rrfConfig,\r\n  dispatch: store.dispatch,\r\n  createFirestoreInstance, // <- needed if using firestore\r\n};\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// registerServiceWorker();\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["51","52"],"C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\reportWebVitals.js",[],"C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\App.js",[],"C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\firebase.js",[],"C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\reducers\\index.js",[],"C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\components\\reserveForm.js",["53","54","55","56"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addApplicant } from \"../actions/applicantActions\";\r\nimport { firestoreConnect } from \"react-redux-firebase\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  FormFeedback,\r\n  Input,\r\n  Row,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\nclass reserveForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone_number: \"\",\r\n    age: 0,\r\n    gender: \"\",\r\n    covid19_positive: false,\r\n    hospitals_applied_to: [],\r\n    symptoms: [],\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleChangeHospital = (e) => {\r\n    console.log(e.target);\r\n    console.log(e.target.checked);\r\n    const hospitalId = e.target.id;\r\n\r\n    if (this.state.hospitals_applied_to.includes(hospitalId)) {\r\n      if (e.target.checked) {\r\n        console.log(\"checked and includes\");\r\n      } else {\r\n        console.log(\"included and unchecked\");\r\n        this.setState({\r\n          ...this.state,\r\n          hospitals_applied_to: this.state.hospitals_applied_to.filter(\r\n            (hospital) => hospitalId != hospital\r\n          ),\r\n        });\r\n      }\r\n    } else {\r\n      if (e.target.checked) {\r\n        console.log(\"checked and not includes\");\r\n        this.state.hospitals_applied_to.push(hospitalId);\r\n      } else {\r\n        console.log(\"un checked and not includes\");\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChangeSymptom = (e) => {\r\n    console.log(e.target);\r\n    console.log(e.target.checked);\r\n    const symptomName = e.target.id;\r\n\r\n    if (this.state.symptoms.includes(symptomName)) {\r\n      if (e.target.checked) {\r\n        console.log(\"checked and includes\");\r\n      } else {\r\n        console.log(\"included and unchecked\");\r\n        this.setState({\r\n          ...this.state,\r\n          symptoms: this.state.symptoms.filter(\r\n            (symptom) => symptomName != symptom\r\n          ),\r\n        });\r\n      }\r\n    } else {\r\n      if (e.target.checked) {\r\n        console.log(\"checked and not includes\");\r\n        this.state.symptoms.push(symptomName);\r\n      } else {\r\n        console.log(\"un checked and not includes\");\r\n      }\r\n    }\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addApplicant(this.state);\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone_number: \"\",\r\n      age: 0,\r\n      gender: \"\",\r\n      covid19_positive: false,\r\n      hospitals_applied_to: [],\r\n      symptoms: [],\r\n    });\r\n    this.resetCheckboxes();\r\n    window.location.href = \"/success\";\r\n  };\r\n\r\n  resetCheckboxes = () => {\r\n    document\r\n      .querySelectorAll(\"input[type=checkbox]\")\r\n      .forEach((el) => (el.checked = false));\r\n\r\n    document\r\n      .querySelectorAll(\"input[type=radio]\")\r\n      .forEach((el) => (el.checked = false));\r\n  };\r\n\r\n  render() {\r\n    const symptoms = [\r\n      \"cough\",\r\n      \"fever\",\r\n      \"headache\",\r\n      \"fatigue\",\r\n      \"Difficulty breathing\",\r\n      \"Runny nose\",\r\n    ];\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Form className=\"white\" onSubmit={this.handleSubmit}>\r\n          <h5 className=\"grey-text text-darken-3 mb-3\">Reserve</h5>\r\n          <FormGroup className=\"input-field mb-2\">\r\n            <Label htmlFor=\"name\">Name</Label>\r\n            <Input\r\n              type=\"text\"\r\n              required\r\n              id=\"name\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup className=\"input-field mb-2\">\r\n            <legend htmlFor=\"symptoms\">Symptoms</legend>\r\n            <br></br>\r\n            {symptoms &&\r\n              symptoms.map((symptom) => {\r\n                return (\r\n                  <React.Fragment>\r\n                    <Label htmlFor={symptom}>{symptom}</Label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id={symptom}\r\n                      name=\"symptoms\"\r\n                      value={symptom}\r\n                      key={symptom}\r\n                      placeholder={symptom}\r\n                      onChange={this.handleChangeSymptom}\r\n                    />\r\n                    <br></br>\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n          </FormGroup>\r\n\r\n          <FormGroup className=\"input-field mb-2\">\r\n            <Label htmlFor=\"email\">Email</Label>\r\n            <Input\r\n              type=\"email\"\r\n              value={this.state.email}\r\n              required\r\n              id=\"email\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"input-field mb-2\">\r\n            <Label htmlFor=\"phone_number\">Phone Number</Label>\r\n            <Input\r\n              type=\"text\"\r\n              value={this.state.phone_number}\r\n              id=\"phone_number\"\r\n              onChange={this.handleChange}\r\n              required\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"input-field mb-2\">\r\n            <Label htmlFor=\"age\">Age</Label>\r\n            <Input\r\n              type=\"number\"\r\n              value={this.state.age}\r\n              required\r\n              id=\"age\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup tag=\"fieldset\">\r\n            <legend>Gender</legend>\r\n            <FormGroup check>\r\n              <Label check>\r\n                <Input\r\n                  type=\"radio\"\r\n                  name=\"gender\"\r\n                  id=\"gender\"\r\n                  value=\"male\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                Male\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check>\r\n              <Label check>\r\n                <Input\r\n                  type=\"radio\"\r\n                  name=\"gender\"\r\n                  id=\"gender\"\r\n                  value=\"female\"\r\n                  onChange={this.handleChange}\r\n                />{\" \"}\r\n                Female\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check>\r\n              <Label check>\r\n                <Input\r\n                  type=\"radio\"\r\n                  name=\"gender\"\r\n                  id=\"gender\"\r\n                  value=\"ratherNotSay\"\r\n                  onChange={this.handleChange}\r\n                />{\" \"}\r\n                Rather Not Say\r\n              </Label>\r\n            </FormGroup>\r\n          </FormGroup>\r\n          <FormGroup tag=\"fieldset\">\r\n            <legend>Are you covid19 positive?</legend>\r\n            <FormGroup check>\r\n              <Label check>\r\n                <Input\r\n                  type=\"radio\"\r\n                  id=\"covid19_positive\"\r\n                  name=\"covid19_positive\"\r\n                  value={true}\r\n                  onChange={this.handleChange}\r\n                />\r\n                Yes\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check>\r\n              <Label check>\r\n                <Input\r\n                  type=\"radio\"\r\n                  id=\"covid19_positive\"\r\n                  name=\"covid19_positive\"\r\n                  value={false}\r\n                  onChange={this.handleChange}\r\n                />\r\n                No\r\n              </Label>\r\n            </FormGroup>\r\n          </FormGroup>\r\n\r\n          <FormGroup className=\"input-field mb-2\">\r\n            <legend htmlFor=\"hospitals_applied_to\">Hospital</legend>\r\n            <br></br>\r\n            {this.props.hospitals &&\r\n              this.props.hospitals.map((hospital) => {\r\n                console.log(hospital);\r\n                return (\r\n                  <React.Fragment>\r\n                    <Label htmlFor={hospital.name}>\r\n                      {hospital.name} (Capacity: {hospital.capacity})\r\n                    </Label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id={hospital.id}\r\n                      name=\"hospitals_applied_to\"\r\n                      value={hospital.id}\r\n                      key={hospital.id}\r\n                      placeholder={hospital.name}\r\n                      onChange={this.handleChangeHospital}\r\n                    />\r\n                    <br></br>\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n          </FormGroup>\r\n\r\n          <FormGroup className=\"input-field mb-2\">\r\n            <Button className=\"btn pink lighten-1 z-depth-0\">Reserve</Button>\r\n          </FormGroup>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addApplicant: (applicant) => dispatch(addApplicant(applicant)),\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    hospitals: state.firestore.ordered.hospitals,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  firestoreConnect([{ collection: \"hospitals\" }])\r\n)(reserveForm);\r\n","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\reducers\\applicantReducer.js",["57","58","59"],"import { firestoreConnect } from \"react-redux-firebase\";\r\nimport * as types from \"../actions/types\";\r\nimport firebase from \"../firebase\";\r\n\r\nconst initialState = {\r\n  age: 0,\r\n  email: \"\",\r\n  gender: \"\",\r\n  covid19_positive: false,\r\n  name: \"\",\r\n  hospitals_applied_to: [],\r\n  name: \"\",\r\n  phone_number: \"\",\r\n  symptoms: [],\r\n  hospitals: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_APPLICANT:\r\n      console.log(\"create applicant success\");\r\n      // firebase\r\n      //   .database()\r\n      //   .ref(\"applicants\")\r\n      //   .on(\"value\", (snapshot) => {\r\n      //     snapshot.forEach((snap) => {\r\n      //       console.log(snap.val());\r\n      //     });\r\n      //   });\r\n      return state;\r\n\r\n    case types.GET_HOSPITALS:\r\n      console.log(\"getHospital\");\r\n      return state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\actions\\types.js",[],"C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\actions\\applicantActions.js",["60","61"],"import * as types from \"./types\";\r\nimport firebase from \"../firebase\";\r\n\r\nexport const addApplicant = (applicant) => {\r\n  return (dispatch, getState, { getFirestore }) => {\r\n    const firestore = getFirestore();\r\n    firestore\r\n      .collection(\"applicants\")\r\n      .add({\r\n        ...applicant,\r\n        age: parseInt(applicant.age),\r\n        createdAt: new Date(),\r\n        covid19_positive: applicant.covid19_positive.toLowerCase() == \"true\",\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: types.ADD_APPLICANT });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({ type: types.ADD_APPLICANT_ERROR }, err);\r\n      });\r\n  };\r\n};\r\n\r\n// export const getHospitals = () => {\r\n//   return (dispatch, getState, { getFirestore }) => {\r\n//     const firestore = getFirestore();\r\n//     firebase\r\n//       .database()\r\n//       .ref(\"hospitals\")\r\n//       .on(\"value\", (snapshot) => {\r\n//         snapshot.forEach((snap) => {\r\n//           console.log(snap.val());\r\n//         });\r\n//       });\r\n//     dispatch({\r\n//       type: types.GET_HOSPITALS,\r\n//     });\r\n//   };\r\n// };\r\n","C:\\Users\\gilbe\\Desktop\\MedReserve\\src\\components\\successForm.js",["62","63","64","65","66","67","68","69"],{"ruleId":"70","severity":1,"message":"71","line":15,"column":3,"nodeType":"72","messageId":"73","endLine":15,"endColumn":19},{"ruleId":"70","severity":1,"message":"74","line":18,"column":3,"nodeType":"72","messageId":"73","endLine":18,"endColumn":29},{"ruleId":"70","severity":1,"message":"75","line":19,"column":3,"nodeType":"72","messageId":"73","endLine":19,"endColumn":18},{"ruleId":"70","severity":1,"message":"76","line":40,"column":7,"nodeType":"72","messageId":"73","endLine":40,"endColumn":15},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"70","severity":1,"message":"81","line":10,"column":3,"nodeType":"72","messageId":"73","endLine":10,"endColumn":15},{"ruleId":"70","severity":1,"message":"82","line":12,"column":3,"nodeType":"72","messageId":"73","endLine":12,"endColumn":6},{"ruleId":"83","severity":1,"message":"84","line":47,"column":38,"nodeType":"85","messageId":"86","endLine":47,"endColumn":40},{"ruleId":"83","severity":1,"message":"84","line":74,"column":38,"nodeType":"85","messageId":"86","endLine":74,"endColumn":40},{"ruleId":"70","severity":1,"message":"87","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":26},{"ruleId":"70","severity":1,"message":"88","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":16},{"ruleId":"89","severity":1,"message":"90","line":12,"column":3,"nodeType":"91","messageId":"86","endLine":12,"endColumn":7},{"ruleId":"70","severity":1,"message":"88","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":16},{"ruleId":"83","severity":1,"message":"92","line":13,"column":68,"nodeType":"85","messageId":"86","endLine":13,"endColumn":70},{"ruleId":"70","severity":1,"message":"93","line":2,"column":3,"nodeType":"72","messageId":"73","endLine":2,"endColumn":9},{"ruleId":"70","severity":1,"message":"94","line":3,"column":3,"nodeType":"72","messageId":"73","endLine":3,"endColumn":7},{"ruleId":"70","severity":1,"message":"95","line":4,"column":3,"nodeType":"72","messageId":"73","endLine":4,"endColumn":12},{"ruleId":"70","severity":1,"message":"81","line":5,"column":3,"nodeType":"72","messageId":"73","endLine":5,"endColumn":15},{"ruleId":"70","severity":1,"message":"96","line":6,"column":3,"nodeType":"72","messageId":"73","endLine":6,"endColumn":8},{"ruleId":"70","severity":1,"message":"82","line":7,"column":3,"nodeType":"72","messageId":"73","endLine":7,"endColumn":6},{"ruleId":"70","severity":1,"message":"97","line":8,"column":3,"nodeType":"72","messageId":"73","endLine":8,"endColumn":8},{"ruleId":"70","severity":1,"message":"98","line":9,"column":3,"nodeType":"72","messageId":"73","endLine":9,"endColumn":12},"no-unused-vars","'firestoreReducer' is defined but never used.","Identifier","unusedVar","'ReactReduxFirebaseProvider' is defined but never used.","'firebaseReducer' is defined but never used.","'rrfProps' is assigned a value but never used.","no-native-reassign",["99"],"no-negated-in-lhs",["100"],"'FormFeedback' is defined but never used.","'Row' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'firestoreConnect' is defined but never used.","'firebase' is defined but never used.","no-dupe-keys","Duplicate key 'name'.","ObjectExpression","Expected '===' and instead saw '=='.","'Button' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'Label' is defined but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]